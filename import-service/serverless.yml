service: my-first-app-mfialko-import-service

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-1
  profile: default
  environment:
    IMPORT_BUCKET: mfialko-first-app-import-bucket
  iam:
    role: AccessS3Role #Custom role lambdas

functions:
  importProductsFile:
    handler: dist/importProductsFile.handler
    events:
      - http:
          path: import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
  
  importFileParser:
    handler: dist/importFileParser.handler
    events:
      - s3:
          bucket: ${self:provider.environment.IMPORT_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploaded/

resources:
  Resources:
    ImportBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.IMPORT_BUCKET}
        AccessControl: 'Private'
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    ImportBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: ${self:provider.environment.IMPORT_BUCKET}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 
                - 'arn:aws:s3:::${self:provider.environment.IMPORT_BUCKET}/*'
    AccessS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AccessS3Role # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: accessS3
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:DeleteObject
                   Resource:
                      "arn:aws:s3:::${self:provider.environment.IMPORT_BUCKET}/*"
    
  
package:
  individually: true
  excludeDevDependencies: false
  exclude: 
    - 'node_modules/**'
